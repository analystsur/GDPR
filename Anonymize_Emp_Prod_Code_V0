/*++++++++++++++++++++++++++++++++
This table will track all the applications that can update records in the HR schema tables. 
APP_ID column will be used to capture the application name. 
++++++++++++++++++++++++++++++++*/

CREATE TABLE HR.APPLICATION
(APP_ID INT PRIMARY KEY,
APP_SHORT_NAME CHAR(5),
APP_NAME VARCHAR(50),
APP_DESC VARCHAR(250)
);

COMMIT;

/*++++++++++++++++++++++++++++++++
Instert records into applicaiton table.
++++++++++++++++++++++++++++++++*/
INSERT INTO HR.APPLICATION VALUES (100, 'REG', 'Regular Processes', 'All data created or stored in the table as a part of a regular process');
INSERT INTO HR.APPLICATION VALUES (101, 'GDPR', 'GENERAL DATA PROTECTION REGULATION', 'The General Data Protection Regulation (GDPR) (EU) 2016/679 is a regulation in EU law on data protection and privacy for all individuals within the European Union (EU) and the European Economic Area (EEA).'); 
COMMIT;

/*++++++++++++++++++++++++++++++++
Now we will go ahead and update the employees table so it has two new columns. 
One of the columns is APP_ID which is in APPLICATION table. The other
column is ACTIVE_IND, this column will allow us to easyly query what records are active or inactive.
++++++++++++++++++++++++++++++++*/
ALTER TABLE HR.EMPLOYEES
ADD 
(ACTIVE_IND char(1) DEFAULT 'Y' NOT NULL, 
APP_ID INT DEFAULT 100 NOT NULL
);

COMMIT;

/*++++++++++++++++++++++++++++++++
This constraint will make sure that the valid values are indeed the values that are available in the APPLICATION table. 
!!!IN CASE THIS STATEMENT FAILS PLEASE MOVE ON AND RUN THE SCRIPT IMMEDIATELY BELOW. BUT ONLY IF THIS SCRIPT FAILS!!!
++++++++++++++++++++++++++++++++*/
ALTER TABLE HR.EMPLOYEES
         ADD ( CONSTRAINT CK_APP_FK
   FOREIGN KEY (APP_ID)
   REFERENCES HR.APPLICATION(APP_ID)
   ) ;
   
COMMIT;
   
/*++++++++++++++++++++++++++++++++
This constraint will make sure that the valid values are indeed the values that are available in the APPLICATION table. 
This ideally should not be hard coded and instead should dynamically check against APPLICATION table. That will be future work.
++++++++++++++++++++++++++++++++
ALTER TABLE HR.T_EMPLOYEES
    ADD CONSTRAINT CK_APPLICATION CHECK (APP_ID IN (100, 101));
	
COMMIT;
*/

/*++++++++++++++++++++++++++++++++
Now we will go ahead and update the JOB_HISTORY since the table has PII too and thus should have two new columns. 
One of the columns is APP_ID which is in APPLICATION table. The other
column is ACTIVE_IND, this column will allow us to easyly query what records are active or inactive.
++++++++++++++++++++++++++++++++*/

ALTER TABLE HR.JOB_HISTORY
ADD 
(ACTIVE_IND char(1) DEFAULT 'Y' NOT NULL, 
APP_ID INT DEFAULT 100 NOT NULL
);

COMMIT;


/*++++++++++++++++++++++++++++++++
This constraint will make sure that the valid values are indeed the values that are available in the APPLICATION table. 
++++++++++++++++++++++++++++++++*/
ALTER TABLE HR.JOB_HISTORY
    ADD CONSTRAINT CK_APPLICATION_JH CHECK (APP_ID IN (100, 101));
	
COMMIT;


/*++++++++++++++++++++++++++++++++
This will make sure the Dates display in YYYY format.
++++++++++++++++++++++++++++++++*/

ALTER SESSION SET NLS_DATE_FORMAT='DD-MON-YYYY';


/*++++++++++++++++++++++++++++++++
This will make sure any triggers are diabled for us to allow running the update script against employees table.
++++++++++++++++++++++++++++++++*/

ALTER TABLE HR.T_EMPLOYEES disable ALL TRIGGERS;
COMMIT;
    
/*++++++++++++++++++++++++++++++++
Update the record for the requester. this should update the new columns too.
++++++++++++++++++++++++++++++++*/	
UPDATE HR.T_EMPLOYEES E
  SET FIRST_NAME = 'GRPR', LAST_NAME = 'GDPR', EMAIL = 'GDPR206@SRMINC.COM', PHONE_NUMBER = '111.111.1111', 
  HIRE_DATE = TO_DATE('01-JAN-9999', 'dd-MON-yyyy'), JOB_ID = 'GDPR', SALARY = 1, 
  MANAGER_ID = NULL, DEPARTMENT_ID = 280, ACTIVE_IND = 'N', APP_ID = 101
  WHERE E.EMPLOYEE_ID = 206; 

COMMIT;

/*++++++++++++++++++++++++++++++++
Once the update script against employees table is executed, we should enable the trigger so there
is no referentail entegrity violation in the future.
++++++++++++++++++++++++++++++++*/
ALTER TABLE HR.T_EMPLOYEES enable ALL TRIGGERS;
COMMIT;

/*++++++++++++++++++++++++++++++++
If you would like to restore the employee_id = 206 to its original state
++++++++++++++++++++++++++++++++*/
  UPDATE HR.T_EMPLOYEES E
  SET FIRST_NAME = 'William', LAST_NAME = 'Gietz', EMAIL = 'WGIETZ', PHONE_NUMBER = '515.123.8181', 
  HIRE_DATE = TO_DATE('07-JUN-1994', 'dd-MON-yyyy'), JOB_ID = 'AC_ACCOUNT', SALARY = 8300,
  MANAGER_ID = 205, DEPARTMENT_ID = 110, ACTIVE_IND = 'Y', APP_ID = 100
  WHERE E.EMPLOYEE_ID = 206; 
  
  COMMIT;
